generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Endereco {
  idendereco   Int            @id(map: "idendereco_pkey") @default(autoincrement())
  pais         String         @default("Brasil") @db.VarChar(50)
  cep          Int
  estadoSigla  String         @default("MS") @db.Char(2)
  estado       String         @default("Mato Grosso do Sul") @db.VarChar(255)
  cidadeSigla  String         @default("CG") @db.Char(2)
  cidade       String         @default("Campo Grande") @db.VarChar(255)
  fkbairro     Int            @default(autoincrement())
  logradouro   String         @db.VarChar(255)
  numero       Int
  complemento  String         @db.VarChar(255)
  Bairro       Bairro         @relation(fields: [fkbairro], references: [idbairro], onDelete: NoAction, onUpdate: NoAction, map: "Bairro")
  Entrevistado Entrevistado[]
}

model Entrevistado {
  identrevistado          Int        @id(map: "identrevistado_pkey") @default(autoincrement())
  fkpessoa                Int        @default(autoincrement())
  genero                  String     @db.Char(2)
  datanascimento          DateTime   @db.Date
  idade                   Int
  fkendereco              Int        @default(autoincrement())
  telefonecontato         String     @db.VarChar(16)
  especiedomicilioocupado String     @db.VarChar(64)
  tipodomicilio           String     @db.VarChar(64)
  profissao               String     @db.VarChar(64)
  nivelescolaridade       String     @db.VarChar(64)
  religiao                String     @db.VarChar(64)
  faixarendafamilia       String     @db.VarChar(64)
  Endereco                Endereco   @relation(fields: [fkendereco], references: [idendereco], onDelete: NoAction, onUpdate: NoAction, map: "Endereco_fk")
  Pessoa                  Pessoa     @relation(fields: [fkpessoa], references: [idpessoa], onDelete: NoAction, onUpdate: NoAction, map: "Pessoa_fk")
  Pesquisa                Pesquisa[]
}

model Papel {
  idpapel   Int       @id(map: "idpapel_pkey") @default(autoincrement())
  sigla     String    @unique @db.Char(2)
  descricao String    @db.VarChar(80)
  Usuario   Usuario[]
}

model Pesquisa {
  idpesquisa     Int          @id(map: "idpesquisa_pkey") @default(autoincrement())
  fkentrevistado Int          @default(autoincrement())
  fkusuario      Int          @default(autoincrement())
  fkrespostas    Int          @default(autoincrement())
  datainicio     DateTime?    @db.Date
  datafim        DateTime?    @db.Date
  Entrevistado   Entrevistado @relation(fields: [fkentrevistado], references: [identrevistado], onDelete: NoAction, onUpdate: NoAction, map: "Entrevistado_fk")
  Usuario        Usuario      @relation(fields: [fkusuario], references: [idusuario], onDelete: NoAction, onUpdate: NoAction, map: "Pessoa_fk")
  Respostas      Respostas    @relation(fields: [fkrespostas], references: [idrespostas], onDelete: NoAction, onUpdate: NoAction, map: "Respostas_fk")
  Relatorio      Relatorio[]
}

model Pessoa {
  idpessoa     Int            @id(map: "idpessoa_pkey") @default(autoincrement())
  nome         String         @db.VarChar(150)
  cpf          String         @unique @db.VarChar(11)
  rg           String         @unique @db.VarChar(9)
  Entrevistado Entrevistado[]
  Usuario      Usuario[]
}

model Regiao {
  idregiao Int    @id(map: "idregiao_pkey") @default(autoincrement())
  pkestado Int    @default(autoincrement())
  pkcidade Int    @default(autoincrement())
  fkbairro Int    @default(autoincrement())
  zona     String @db.VarChar(80)
  Bairro   Bairro @relation(fields: [fkbairro], references: [idbairro], onDelete: NoAction, onUpdate: NoAction, map: "Bairro_fk")
}

model Relatorio {
  idrelatorio Int       @id(map: "idrelatorio_pkey") @default(autoincrement())
  datainicio  DateTime? @db.Date
  fkpesquisa  Int       @default(autoincrement())
  Pesquisa    Pesquisa  @relation(fields: [fkpesquisa], references: [idpesquisa], onDelete: NoAction, onUpdate: NoAction, map: "Pesquisa_fk")
}

model Usuario {
  idusuario    Int        @id(map: "idusuario_pkey") @default(autoincrement())
  senha        String     @db.VarChar(155)
  email        String     @unique @db.VarChar(155)
  fkpapel      Int        @default(autoincrement())
  fkpessoa     Int        @default(autoincrement())
  supervisor   Int        @default(autoincrement())
  Papel        Papel      @relation(fields: [fkpapel], references: [idpapel], onDelete: NoAction, onUpdate: NoAction, map: "Papel_fk")
  Pessoa       Pessoa     @relation(fields: [fkpessoa], references: [idpessoa], onDelete: NoAction, onUpdate: NoAction, map: "Pessoa_fk")
  Usuario      Usuario    @relation("UsuarioToUsuario", fields: [supervisor], references: [idusuario], onDelete: NoAction, onUpdate: NoAction, map: "Supervisor_fk")
  Pesquisa     Pesquisa[]
  Supervisiona Usuario[]  @relation("UsuarioToUsuario")
}

model Bairro {
  idbairro Int        @id(map: "idbairro_pkey") @default(autoincrement())
  nome     String     @db.VarChar(255)
  Endereco Endereco[]
  Regiao   Regiao[]
}

model Questionario {
  idquestionario Int         @id(map: "idquestionario_pkey") @default(autoincrement())
  descricao      String      @db.VarChar(80)
  Perguntas      Perguntas[]
  Respostas      Respostas[]
}

model Perguntas {
  idperguntas    Int          @id(map: "idperguntas_pkey") @default(autoincrement())
  fkquestionario Int          @default(autoincrement())
  descricao      String       @db.VarChar(128)
  Questionario   Questionario @relation(fields: [fkquestionario], references: [idquestionario], onDelete: NoAction, onUpdate: NoAction, map: "Questionario_fk")
  Respostas      Respostas[]
}

model Respostas {
  idrespostas    Int          @id(map: "idrespostas_pkey") @default(autoincrement())
  fkquestionario Int          @default(autoincrement())
  fkperguntas    Int          @default(autoincrement())
  valor          String       @db.VarChar(80)
  Perguntas      Perguntas    @relation(fields: [fkperguntas], references: [idperguntas], onDelete: NoAction, onUpdate: NoAction, map: "Perguntas_fk")
  Questionario   Questionario @relation(fields: [fkquestionario], references: [idquestionario], onDelete: NoAction, onUpdate: NoAction, map: "Questionario_fk")
  Pesquisa       Pesquisa[]
}
